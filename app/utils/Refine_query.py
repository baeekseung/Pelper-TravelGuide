from langchain_openai import ChatOpenAI
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser

async def refine_query(location_text: str, query: str) -> str:

    llm = ChatOpenAI(model_name="gpt-4o", temperature=0.0001, max_tokens=64)

    prompt_text = """## 개선된 검색 쿼리 생성 프롬프트

**설명:**  
사용자의 현재 위치(`location_text`)와 사용자가 입력한 요청(`query`)을 결합해, 네이버에서 바로 검색할 수 있는 **자연스럽고 구체적인 검색 쿼리**를 생성하세요.  
- 위치 정보를 항상 포함하세요 (도시/구/동 단위까지 가능하면 포함).  
- 요청의 핵심 키워드(음식 종류, 특성, 조건 등)를 추출해 쿼리에 반영하세요.  
- 필요할 경우 의도에 맞는 수식어(“가성비”, “추천”, “오션뷰”, “가까운”, “가는 방법” 등)를 추가하세요.  
- 요청이 길어도 **짧고 명확한 검색 쿼리**로 만드세요.

## 예시
- **사용자의 위치:** 경상북도 청도군 화양읍  
  **사용자의 쿼리:** 소금빵이 맛있는 카페를 추천해줘  
  **검색 쿼리:** 경상북도 청도군 화양읍 소금빵 맛집 카페  

- **사용자의 위치:** 부산시 해운대구  
  **사용자의 쿼리:** 바다가 보이는 맛집을 추천해줘  
  **검색 쿼리:** 부산시 해운대구 오션뷰 맛집  

- **사용자의 위치:** 서울시 마포구  
  **사용자의 쿼리:** 브런치 하기 좋은 카페 알려줘  
  **검색 쿼리:** 서울시 마포구 브런치 맛집 카페  

- **사용자의 위치:** 청도군 화양읍  
  **사용자의 쿼리:** 돼지갈비가 싸고 맛있는 맛집을 추천해줘  
  **검색 쿼리:** 청도군 화양읍 가성비 돼지갈비 맛집  

- **사용자의 위치:** 대구시 수성구  
  **사용자의 쿼리:** 회식하기 좋은 삼겹살집 찾아줘  
  **검색 쿼리:** 대구시 수성구 회식 삼겹살 맛집  

- **사용자의 위치:** 서울시 강남구  
  **사용자의 쿼리:** 값싼 숙소를 추천해줘  
  **검색 쿼리:** 서울시 강남구 가성비 숙소  

- **사용자의 위치:** 강릉시  
  **사용자의 쿼리:** 강릉 바다 보이는 호텔 추천해줘  
  **검색 쿼리:** 강릉시 오션뷰 호텔 추천  

- **사용자의 위치:** 경상북도 경산시 중앙동  
  **사용자의 쿼리:** 여기에서 청도로 가는 방법 알려줘  
  **검색 쿼리:** 경상북도 경산시 중앙동에서 청도로 가는 방법  

- **사용자의 위치:** 서울시 종로구  
  **사용자의 쿼리:** 종로에서 인천공항 가는 가장 빠른 길 알려줘  
  **검색 쿼리:** 서울시 종로구 인천공항 가는 방법  

- **사용자의 위치:** 제주시 서귀포시  
  **사용자의 쿼리:** 가장 가까운 야시장을 찾아줘  
  **검색 쿼리:** 제주시 서귀포시 야시장  

- **사용자의 위치:** 전주시 완산구  
  **사용자의 쿼리:** 전주에서 한옥체험 할 수 있는 곳 알려줘  
  **검색 쿼리:** 전주시 완산구 한옥체험 장소  

- **사용자의 위치:** 서울시 용산구  
  **사용자의 쿼리:** 이 근처에서 전시회 하는 곳 추천  
  **검색 쿼리:** 서울시 용산구 전시회  

## 출력
- **사용자의 위치:** {location_text}
  **사용자의 쿼리:** {query}
  **검색 쿼리:** 
"""

    prompt = PromptTemplate(
        template=prompt_text,
        input_variables=["query", "location_text"]
    )
    
    chain = prompt | llm | StrOutputParser()

    return chain.invoke({"query": query, "location_text": location_text})
